version: '3'

services:
  reverse-proxy:
    image: traefik:v2.6
    command:
      - --api.insecure=true
      - --providers.docker
      - --providers.docker=true
    ports:
      - '80:80'
      - '8080:8080'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  whoami:
    # A container that exposes an API to show its IP address
    image: traefik/whoami
    labels:
      - 'traefik.http.routers.whoami.rule=Host(`whoami.docker.localhost`)'
  myapi:
    # A container that exposes an API to show its IP address
    image: garredow/test-api:1
    environment:
      PORT: $PORT
    labels:
      - 'traefik.http.routers.myapi.rule=Host(`kaiware.garredow.co`)'
      - 'traefik.http.services.myapi.loadbalancer.server.port=3000'
  foxcasts:
    # A container that exposes an API to show its IP address
    image: garredow/foxcasts-cloud-api:test2
    environment:
      APP_NAME: $APP_NAME
      SERVER_PORT: $SERVER_PORT
      LOGGER_ENABLED: $LOGGER_ENABLED
      LOGGER_LEVEL: $LOGGER_LEVEL
      DB_HOST: $DB_HOST
      DB_PORT: $DB_PORT
      DB_USER: $DB_USER
      DB_PASSWORD: $DB_PASSWORD
      DB_DATABASE: $DB_DATABASE
      AUTH0_DOMAIN: $AUTH0_DOMAIN
      AUTH0_AUDIENCE: $AUTH0_AUDIENCE
      PI_API_KEY: $PI_API_KEY
      PI_API_SECRET: $PI_API_SECRET
      DATA_STALE_MS: $DATA_STALE_MS
    labels:
      - 'traefik.http.routers.foxcasts.rule=Host(`foxcasts.garredow.co`)'
      - 'traefik.http.services.foxcasts-api.loadbalancer.server.port=3000'
